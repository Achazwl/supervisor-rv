
name: release
on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup dependencies
        run: |
          sudo apt install -y expect python3-pip
          sudo pip3 install pyserial
          curl https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.2.0-2019.05.3-x86_64-linux-ubuntu14.tar.gz > toolchain.tar.gz
          tar -xf toolchain.tar.gz

      - name: Build binaries
        run: |
          export PATH=$PATH:$PWD/riscv64-unknown-elf-gcc-8.2.0-2019.05.3-x86_64-linux-ubuntu14/bin
          make BITS=32 -C kernel/
          cp kernel/kernel.bin kernel/kernel32.bin
          make BITS=32 EN_FENCEI=y -C kernel/
          cp kernel/kernel.bin kernel/kernel32-fencei.bin
          make BITS=32 EN_INT=y -C kernel/
          cp kernel/kernel.bin kernel/kernel32-int.bin
          make BITS=32 EN_INT=y EN_FENCEI=y -C kernel/
          cp kernel/kernel.bin kernel/kernel32-int-fencei.bin
          make BITS=32 EN_INT=y EN_PAGING=y -C kernel/
          cp kernel/kernel.bin kernel/kernel32-int-paging.bin
          make BITS=32 EN_INT=y EN_PAGING=y EN_FENCEI=y -C kernel/
          cp kernel/kernel.bin kernel/kernel32-int-paging-fencei.bin
          make BITS=64 -C kernel/
          cp kernel/kernel.bin kernel/kernel64.bin
          make BITS=64 EN_FENCEI=y -C kernel/
          cp kernel/kernel.bin kernel/kernel64-fencei.bin
          make BITS=64 EN_INT=y -C kernel/
          cp kernel/kernel.bin kernel/kernel64-int.bin
          make BITS=64 EN_INT=y EN_FENCEI=y -C kernel/
          cp kernel/kernel.bin kernel/kernel64-int-fencei.bin
          make BITS=64 EN_INT=y EN_PAGING=y -C kernel/
          cp kernel/kernel.bin kernel/kernel64-int-paging.bin
          make BITS=64 EN_INT=y EN_PAGING=y EN_FENCEI=y -C kernel/
          cp kernel/kernel.bin kernel/kernel64-int-paging-fencei.bin

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: kernel/kernel32.bin
            asset_name: kernel32.bin
            asset_content_type: application/octet-stream